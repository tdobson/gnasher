-- Create the 'snowy' database if it does not exist
CREATE DATABASE IF NOT EXISTS snowy;
USE snowy;

-- Now, proceed with creating tables within the 'snowy' database

-- This table stores all projects. Each project is linked to a client and a site, and it contains various project-specific details.
CREATE TABLE IF NOT EXISTS sn_projects (
    project_id CHAR(36) NOT NULL, -- Primary Key: Unique identifier for each project. Source: this is autogenerated uniquely.
    client_id CHAR(36) NOT NULL, -- Foreign Key: Links to a client in the sn_clients table. Source: this the key from the Clients Table that links to the client this project uses.
    pv_number VARCHAR(255) UNIQUE NOT NULL, -- PV number, unique to each project, following the pattern 'PV[0-9]{6}'. Source: this is derived from the Projects Sheet,
    dno_details_id CHAR(36) NOT NULL, -- Foreign Key: Reference to DNO MPAN details.
    region_id CHAR(36), -- Foreign Key: Identifier linking to a specific region in the sn_region table.
    site_id CHAR(36), -- Foreign Key: Identifier linking to a specific site in the sn_sites table.
    ref_number VARCHAR(255), -- Legacy reference number, possibly used for historical tracking.
    project_name VARCHAR(255), -- Descriptive name of the project.
    job_code VARCHAR(255), -- Client's internal reference code for the project eg JSA-ASD
    comments TEXT, -- Field for any additional comments or notes about the project.
    import_id CHAR(36), -- Foreign Key: Links to an import event in the sn_import_events table.
    dno_zone VARCHAR(255),           -- Zone identifier for the DNO (Distribution Network Operator). //todo // irradience zone - this derives the kk figures and will be done on site postcode
    PRIMARY KEY (project_id),
    FOREIGN KEY (project_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (client_id) REFERENCES sn_clients(client_id),
    FOREIGN KEY (region_id) REFERENCES sn_region(region_id),
    FOREIGN KEY (dno_details_id) REFERENCES sn_dno_details(dno_details_id),
    FOREIGN KEY (site_id) REFERENCES sn_sites(site_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

CREATE TABLE IF NOT EXISTS sn_project_process (
    approval_id CHAR(36) NOT NULL, -- Primary Key: Unique identifier for each approval process.
    project_id CHAR(36) UNIQUE, -- Foreign Key: Links to the corresponding project in sn_projects.
    approval_status CHAR(36), -- Foreign Key: Links to the current status of the approval in sn_status.
    deadline_to_connect DATE, -- Deadline for the project to establish a connection.
    auth_letter_sent BOOLEAN, -- Indicates whether the letter of authority has been sent.
    mpan_request_sent BOOLEAN, -- Indicates if the MPAN (Meter Point Administration Number) request has been sent.
    schematic_created BOOLEAN, -- Indicates if the project's schematic has been created.
    application_type VARCHAR(255), -- Specifies the type of application (e.g., g98, g99, g100, or mixed).
    formal_dno_submitted BOOLEAN, -- Indicates if the formal submission to the DNO (Distribution Network Operator) has been made.
    submission_date DATE, -- Date on which the paperwork was submitted.
    dno_due_date DATE, -- Due date for the DNO to respond.
    dno_status CHAR(36), -- Foreign Key: Current status related to the DNO approval.
    approved_kwp FLOAT, -- Amount of kilowatt-peak approved by the DNO.
    quote_received BOOLEAN, -- Indicates whether a quote has been received.
    customer_invoiced_date DATE, -- Date on which the customer was invoiced.
    dno_payment_made DATE, -- Date on which payment was made to the DNO.
    acceptance_form_returned BOOLEAN, -- Indicates if the acceptance form has been returned.
    date_approved DATE, -- Date on which the project received approval.
    import_id CHAR(36), -- Foreign Key: Links to an import event in the sn_import_events table.
    PRIMARY KEY (approval_id),
    FOREIGN KEY (approval_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (project_id) REFERENCES sn_projects(project_id),
    FOREIGN KEY (dno_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);


-- Table: sn_plots
-- This table stores information about individual plots in projects. //todo probably needs to split out and include a plots process and plots table. The paperwork should be seperate.
-- the field called g98 is all about whether the form itself has been generated
-- g98 application is single form per project, which lists every plot
-- g99 application is a form per plot for everything in the project
-- g98/g99 = different form for same purpose. Smaller = g98 and we can programmatically figure them out
-- g100 = export limitation and can possibly occur at same time
CREATE TABLE IF NOT EXISTS sn_plots (
    plot_id CHAR(36) NOT NULL,       -- Unique identifier for each plot.
    project_id CHAR(36) NOT NULL,    -- Foreign key to 'sn_projects', identifying the project the plot belongs to.
    plot_number VARCHAR(255) NOT NULL,-- Alphanumeric identifier for the plot.
    plot_status CHAR(36),            -- Foreign key to 'sn_status', indicating the current status of the plot.
    site CHAR(36),                   -- Foreign key to 'sn_sites', identifying the site where the plot is located.
    housetype VARCHAR(255),          -- Description of the type of house on the plot.
    g99 BOOLEAN,                     -- Boolean indicating whether G99 standards apply. //todo
    mpan VARCHAR(255),               -- MPAN (Meter Point Administration Number) for the plot. // the first two chars of this are the DNO.
    plot_address_id CHAR(36),        -- Plot Address ID 
    plot_approved BOOLEAN,           -- Boolean indicating whether the plot has been approved.
    commissioning_form_submitted BOOLEAN, -- Boolean indicating whether the commissioning form has been submitted.
    import_id CHAR(36),             -- Identifier for data import, if applicable.
    tracker_ref CHAR(36),            -- Reference to a tracking system, if applicable.
    PRIMARY KEY (plot_id),
    FOREIGN KEY (project_id) REFERENCES sn_projects(project_id),
    FOREIGN KEY (site_address_id) REFERENCES sn_addresses(address_id),
    FOREIGN KEY (plot_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id),
    FOREIGN KEY (site) REFERENCES sn_sites(site_id)
);


-- This table holds the specifications for individual plots.
-- It includes details such as the date of specification, the person who specified it, and various technical and financial details about the plot.
CREATE TABLE IF NOT EXISTS sn_plot_spec (
    plot_spec_id CHAR(36) NOT NULL,  -- Unique identifier for the plot specification.
    plot_id CHAR(36) NOT NULL,       -- Unique identifier for each plot.
    date_specified DATE,             -- The date when this specification was made.
    specified_by CHAR(36),           -- User ID of the person who specified this plot, linked to the sn_users table.
    plot_spec_status CHAR(36),                 -- The status of the plot, linked to a status table (like 'pending', 'approved').
    phase INT,                       -- Whether it's 1 phase or 3 phase
    p1 FLOAT,                        -- Details specific to phase 1 (e.g., power-related values).
    p2 FLOAT,                        -- Details specific to phase 2, if applicable.
    p3 FLOAT,                        -- Details specific to phase 3, if applicable.
    annual_yield FLOAT,              -- Expected annual yield from the plot (in units like kWh).
    kwp FLOAT,                       -- The kilowatt-peak of the plot without any limitations factored in.
    kwp_with_limitation FLOAT,       -- Kilowatt-peak with any limitations applied.
    limiter_required BOOLEAN,        -- Whether a limiter is required for the plot.
    limiter_value_if_not_zero FLOAT, -- The value of the limiter if it's not zero.
    labour_cost FLOAT,               -- Labour cost for working on the plot in Â£
    meter CHAR(36),                       -- Meter product ID, linked to a products table.
    meter_cost FLOAT,                -- Cost of the meter.
    battery CHAR(36),                     -- Battery product ID, linked to a products table.
    battery_cost FLOAT,              -- Cost of the battery.
    overall_cost FLOAT,              -- Total cost associated with this plot.
    landlord_supply BOOLEAN,         -- Indicates if the landlord is responsible for the supply.
    import_id CHAR(36),              -- Identifier for the import record, if this data was imported.
    PRIMARY KEY (plot_meta_id),
    FOREIGN KEY (plot_id) REFERENCES sn_plots(plot_id),
    FOREIGN KEY (specified_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id),
    FOREIGN KEY (plot_spec_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (meter) REFERENCES sn_products(product_id),
    FOREIGN KEY (battery) REFERENCES sn_products(product_id)
);

CREATE TABLE IF NOT EXISTS sn_clients (
    client_id CHAR(36) NOT NULL,          -- Unique identifier for each client.
    client_legacy_number VARCHAR(255),     -- old unique client identifier
    client_name VARCHAR(255) NOT NULL UNIQUE,    -- Name of the client.
    user_address_id CHAR(36)            --- Address details
    client_plot_card_required VARCHAR(255),-- the type of plot card required by the client (null if not required)
    contact_id VARCHAR(255),              -- Name of the primary contact for the client.
    import_id CHAR(36),                   -- Identifier for the import event, linking to sn_import_events.
    PRIMARY KEY (client_id),
    FOREIGN KEY (site_address_id) REFERENCES sn_addresses(address_id),
    FOREIGN KEY (contact_id) REFERENCES sn_users(user_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
) ;


-- This table records details about the installation of each plot.
CREATE TABLE IF NOT EXISTS sn_plot_install (
    plot_install_id CHAR(36) NOT NULL,  -- Unique identifier for each installed plot. It's like a 'version' of a plot after it's installed.
    plot_id CHAR(36) NOT NULL,       -- Unique identifier for each plot.
    date_install DATE,             -- The date when the plot was actually installed.
    date_checked DATE,               -- The date when the installation was checked or verified for quality or compliance.
    install_by CHAR(36),           -- User ID of the person who installed the plot. This links to the 'sn_users' table.
    checked_by CHAR(36),             -- User ID of the person who checked the plot. Also links to the 'sn_users' table.
    plot_install_status CHAR(36) NOT NULL, -- The current status of the plot by installation, linking to a status table (e.g., 'complete', 'pending review').
    phase INT,                       -- Whether it's 1 phase or 3 phase
    p1 FLOAT,                        -- Details specific to phase 1 of the installation, possibly related to power or capacity.
    p2 FLOAT,                        -- Details specific to phase 2, if applicable.
    p3 FLOAT,                        -- Details specific to phase 3, if applicable.
    annual_yield FLOAT,              -- The expected annual yield from the plot post-installation, measured in units like kWh.
    kwp FLOAT,                       -- The kilowatt-peak of the plot without any limitations factored in.
    kwp_with_limitation FLOAT,       -- The kilowatt-peak of the plot with any limitations factored in.
    limiter_required BOOLEAN,        -- Indicates whether a power limiter was required for the plot.
    limiter_value_if_not_zero FLOAT, -- Specifies the value of the limiter, assuming it's not zero.
    labour_cost FLOAT,               -- The cost of labour involved in installing the plot.
    meter CHAR(36),                       -- A reference to the type of meter used, linked to a product ID in 'sn_products'.
    meter_cost FLOAT,                -- The cost of the meter used in the installation.
    battery CHAR(36),                     -- A reference to the type of battery used, linked to a product ID in 'sn_products'.
    battery_cost FLOAT,              -- The cost of the battery used in the installation.
    overall_cost FLOAT,              -- The total cost of the installation, including all components and labour.
    mcs_submission_id CHAR(36),               -- MCS Submission ID
    import_id CHAR(36),              -- If this data was imported, this is the ID of the import event for traceability.
    PRIMARY KEY (plot_meta_id),
    FOREIGN KEY (plot_id) REFERENCES sn_plots(plot_id),
    FOREIGN KEY (install_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (checked_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (plot_install_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (meter) REFERENCES sn_products(product_id),
    FOREIGN KEY (battery) REFERENCES sn_products(product_id),
    FOREIGN KEY (mcs_submission_id) REFERENCES sn_mcs_submission(mcs_submission_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);


-- This table details the elevations of each plot, which is crucial in solar installations for understanding the positioning and potential energy yield.
CREATE TABLE IF NOT EXISTS sn_elevations (
    elevation_id CHAR(36) NOT NULL,  -- Unique identifier for each elevation record.
    plot_ref_id CHAR(36) NOT NULL,   -- Reference to the plot, either as specified or as installed.
    plot_id CHAR(36) NOT NULL,
    type_test_ref VARCHAR(255),      -- A reference to a type test or other technical specification.
    pitch FLOAT,                     -- The pitch of the installation surface, crucial for solar panel installations.
    orientation VARCHAR(255),        -- The orientation of the solar panels (e.g., north, south).
    kk_figure FLOAT,                 -- A figure used in calculations, possibly related to energy yield or efficiency.
    kwp FLOAT,                       -- Kilowatt-peak of the installation at this elevation.
    strings INT,                     -- Number of strings (groups of panels) in the solar setup.
    module_qty INT,                  -- Quantity of modules (individual solar panels) in the setup.
    inverter VARCHAR(255),           -- Identifier for the inverter used, possibly linked to a product ID.
    inverter_cost FLOAT,             -- The cost of the inverter.
    panel VARCHAR(255),              -- Identifier for the type of solar panel used.
    panel_cost FLOAT,                -- The cost of the solar panels.
    panels_total_cost FLOAT,         -- Total cost of all the panels used in the elevation.
    roof_kit VARCHAR(255),           -- Identifier for the roof mounting kit used.
    roof_kit_cost FLOAT,             -- Cost of the roof mounting kit.
    annual_yield FLOAT,              -- The expected annual energy yield from this elevation setup.
    import_id CHAR(36),
    PRIMARY KEY (elevation_id),
    FOREIGN KEY (inverter) REFERENCES sn_products(product_id),
    FOREIGN KEY (panel) REFERENCES sn_products(product_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id),
    FOREIGN KEY (roof_kit) REFERENCES sn_products(product_id)

);


-- Table: sn_form_submissions
-- This table tracks various form submissions related to plots, sites, and products.
-- It links to the 'sn_plots', 'sn_sites', and 'sn_products' tables.
CREATE TABLE IF NOT EXISTS sn_form_submissions (
    submission_id CHAR(36) NOT NULL,  -- Unique identifier for each submission.
    dm_submission_id VARCHAR(255) UNIQUE NOT NULL, -- Device magic key
    plot_id CHAR(36) NOT NULL,        -- Foreign key to 'sn_plots', identifying the plot related to the submission.
    job_id CHAR(36) NOT NULL,         -- Foreign key to 'sn_sites', identifying the site related to the submission.
    import_id CHAR(36),
    PRIMARY KEY (submission_id),
    FOREIGN KEY (plot_id) REFERENCES sn_plots(plot_id),
    FOREIGN KEY (job_id) REFERENCES sn_jobs(job_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);


-- Table: sn_jobs
-- This table tracks jobs assigned to plots and projects, and their statuses.
CREATE TABLE IF NOT EXISTS sn_jobs (
    job_id CHAR(36) NOT NULL,        -- Unique identifier for each job.
    plot_id CHAR(36) NOT NULL,       -- Foreign key to 'sn_plots', identifying the plot associated with the job.
    project_id CHAR(36) NOT NULL,    -- Foreign key to 'sn_projects', identifying the project associated with the job.
    user_id CHAR(36) NOT NULL,       -- Foreign key to 'sn_users', identifying the user responsible for the job.
    slot_id CHAR(36) NOT NULL,       -- Foreign key to 'sn_slots', linking the job to a specific time slot.
    job_status CHAR(36) NOT NULL,    -- Foreign key to 'sn_status', indicating the status of the job.
    dispatch_id VARCHAR(255),        -- Dispatch identifier for the job.
    submission_id CHAR(36),          -- Foreign key to 'sn_form_submissions', linking the job to a submission.
    dispatched_at DATE,              -- Date when the job was dispatched.
    dispatched_by CHAR(36),          -- Foreign key to 'sn_users', identifying the user who dispatched the job.
    returned_at DATE,                -- Date when the job was returned.
    returned_by CHAR(36),            -- Foreign key to 'sn_users', identifying the user who returned the job.
    dispatch_team CHAR(36),          -- Foreign key to 'sn_teams', identifying the team responsible for the dispatch.
    import_id CHAR(36),
    PRIMARY KEY (job_id),
    FOREIGN KEY (plot_id) REFERENCES sn_plots(plot_id),
    FOREIGN KEY (project_id) REFERENCES sn_projects(project_id),
    FOREIGN KEY (dispatched_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (returned_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (job_status) REFERENCES sn_status(job_id),
    FOREIGN KEY (user_id) REFERENCES sn_users(user_id),
    FOREIGN KEY (slot_id) REFERENCES sn_slots(slot_id),
    FOREIGN KEY (dispatch_team) REFERENCES sn_teams(team_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

-- Table: sn_users
-- Description: This table stores information about users within the Snowy system. It includes their basic details,
-- roles, team affiliations, and links to their import events.
CREATE TABLE IF NOT EXISTS sn_users (
    user_id CHAR(36) NOT NULL,             -- Unique identifier for each user. Typically a UUID.
    sso_id VARCHAR(255),                   -- Single Sign-On identifier for the user, if applicable.
    name VARCHAR(255) NOT NULL,            -- Full name of the user.
    email VARCHAR(255) UNIQUE NOT NULL,    -- Email address of the user. Marked unique to prevent duplicate entries.
    password VARCHAR(255),                  -- salted bcrypt2 password. can be null as not all users actually can login.
    phone VARCHAR(255),                    -- Phone address of the user.
    employer VARCHAR(255),                 -- Name of the user's employer. Helps in categorizing users by their organization.
    team CHAR(36),                         -- Foreign key linking to the 'sn_teams' table. Indicates the team the user belongs to.
    dispatch_id VARCHAR(255),              -- Identifier used for Device Magic dispatching purposes, if applicable.
    snowy_role VARCHAR(255) NOT NULL,      -- Role of the user within the Snowy application. E.g., Administrator, Contact, Viewer.
    company_role VARCHAR(255),             -- Role of the user within their company. This is more about their job title or position.
    import_id CHAR(36),                    -- Foreign key linking to the 'sn_import_events' table. Helps in tracking the import event related to this user.
    category CHAR(36),                      -- Human/Company/Etc
    user_address_id CHAR(36)            --- Address details
    PRIMARY KEY (user_id),                 -- 'user_id' is the primary key ensuring each record is unique.
    FOREIGN KEY (site_address_id) REFERENCES sn_addresses(address_id),
    FOREIGN KEY (team) REFERENCES sn_teams(team_id), -- Establishes a foreign key relationship with the 'sn_teams' table.
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id) -- Establishes a foreign key relationship with the 'sn_import_events' table.
)


-- Table: sn_teams
-- This table stores information about teams within the organization.
CREATE TABLE IF NOT EXISTS sn_teams (
    team_id CHAR(36) NOT NULL,       -- Unique identifier for each team.
    team_name VARCHAR(255) UNIQUE NOT NULL, -- Name of the team.
    team_description VARCHAR(255),   -- Description of the team's purpose and role.
    import_id CHAR(36),
    PRIMARY KEY (team_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

-- Table: sn_status
-- This table defines various statuses that can be assigned to jobs.
CREATE TABLE IF NOT EXISTS sn_status (
    status_id CHAR(36) NOT NULL,          -- Unique identifier for each job status.
    status_state VARCHAR(255) NOT NULL,    -- status of the job status. (eg approved)
    status_name VARCHAR(255) NOT NULL,    -- What is the name a status of? (eg Plots dispatch)
    status_code VARCHAR(255),             -- Code associated with the job status. (eg APR)
    status_description VARCHAR(255),      -- Short description of what this status means (eg "This plot it dispatched and approved")
    import_id CHAR(36),
    PRIMARY KEY (status_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)

);

-- Table: sn_import_events
-- This table logs import events, such as data imports, and links them to users.
CREATE TABLE IF NOT EXISTS sn_import_events (
    import_id CHAR(36) NOT NULL,     -- Unique identifier for each import event.
    import_date DATE NOT NULL,                -- Date of the import event.
    imported_by CHAR(36) NOT NULL,                -- Foreign key to 'sn_users', identifying the user who performed the import.
    modified_date DATE NOT NULL,             -- Date of the last modification event.
    modified_by CHAR(36),                -- Foreign key to 'sn_users', identifying the user who performed the import.
    modification_ref VARCHAR(255), -- Reference identifier for the import eve
    import_ref VARCHAR(255),         -- Reference identifier for the import event.
    import_source VARCHAR(255),      -- Source of the imported data.
    import_notes TEXT,               -- Additional notes or comments about the import event.
    PRIMARY KEY (import_id),
    FOREIGN KEY (imported_by) REFERENCES sn_users(user_id)
        FOREIGN KEY (modified_by) REFERENCES sn_users(user_id)

);


-- Table: sn_slots
-- This table manages time slots for jobs, ensuring proper scheduling.
CREATE TABLE IF NOT EXISTS sn_slots (
    slot_id CHAR(36) NOT NULL,       -- Unique identifier for each slot.
    date DATE NOT NULL,                       -- Date for the slot.
    location_slot INT NOT NULL,               -- Location identifier for the slot.
    time_slot INT NOT NULL,                   -- Time identifier for the slot.
    job_id CHAR(36) NOT NULL,                 -- Foreign key to 'sn_jobs', linking the slot to a specific job.
    import_id CHAR(36),
    PRIMARY KEY (slot_id),
    FOREIGN KEY (job_id) REFERENCES sn_jobs(job_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

CREATE TABLE IF NOT EXISTS sn_addresses (
    address_id CHAR(36) NOT NULL,        -- Unique identifier for the address.
    address_line_1 VARCHAR(255),         -- First line of the address.
    address_line_2 VARCHAR(255),         -- Second line of the address.
    address_town VARCHAR(255),           -- Town of the address.
    address_county VARCHAR(255),         -- County of the address.
    address_postcode VARCHAR(255),       -- Postcode of the address.
    address_country VARCHAR(255),        -- Country of the address.
    address_region_id CHAR(36),          -- Region ID, linking to the sn_regions table.
    import_id CHAR(36),                  -- Import event ID, linking to the sn_import_events table.
    PRIMARY KEY (address_id),
    FOREIGN KEY (address_region_id) REFERENCES sn_regions(region_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);



-- This table details the sites where projects are located, including address and contact information for site managers and DNO responsible.
CREATE TABLE IF NOT EXISTS sn_sites (
    site_id CHAR(36) NOT NULL,        -- Unique identifier for the site.
    project_id CHAR(36) NOT NULL      -- Project ID, linking the site to a specific project in sn_projects.
    dno_details_id CHAR(36),          -- DNO details ID, linking to the sn_dno_details table.
    site_address_id CHAR(36)            --- Address details
    site_manager_id CHAR(36),   -- User ID of the site manager.
    import_id CHAR(36), -- Import event ID, linking to the sn_import_events table.
    PRIMARY KEY (site_id),
    FOREIGN KEY (site_address_id) REFERENCES sn_addresses(address_id),
    FOREIGN KEY (site_manager_id) REFERENCES sn_users(user_id),
    FOREIGN KEY (project_id) REFERENCES sn_projects(project_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id),
    FOREIGN KEY (dno_details_id) REFERENCES sn_dno_details(dno_details_id)
);

-- This table contains details about Distribution Network Operators (DNOs), including contact information.
CREATE TABLE IF NOT EXISTS sn_dno_details (
    dno_details_id CHAR(36) NOT NULL,           -- Auto-incrementing ID for each DNO entry.
    mpan_prefix INT UNIQUE NOT NULL,            -- Unique MPAN prefix associated with the DNO.
    dno_name VARCHAR(255) UNIQUE NOT NULL,            -- Name of the DNO.
    address VARCHAR(255),                       -- Address of the DNO.
    email_address VARCHAR(255),                 -- Email address for contacting the DNO.
    contact_no VARCHAR(255),                    -- Contact phone number for the DNO.
    internal_tel VARCHAR(255),                  -- Internal telephone number, if applicable.
    type VARCHAR(255),                          -- Type of DNO.
    import_id CHAR(36),
    PRIMARY KEY (dno_details_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);


-- This table holds information about different regions, potentially for project allocation and management.
CREATE TABLE IF NOT EXISTS sn_region (
    region_id CHAR(36) NOT NULL,            -- Unique identifier for each region.
    region_number CHAR(10) UNIQUE NOT NULL,             -- Numerical representation of the region.
    region_name VARCHAR(255),               -- Name of the region. // Region 1 Scotland. Region 2 is England, Region 3 is Wales, Region 4 is NI.
    import_id CHAR(36),
    UNIQUE (region_number),
    PRIMARY KEY (region_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

-- This table holds information about various products such as Roof Kits, Panels, Batteries, Inverters, etc.
-- It includes details like the manufacturer, model, name, and various technical specifications.
CREATE TABLE IF NOT EXISTS sn_products (
    product_id CHAR(36) NOT NULL,             -- Primary Key: Unique identifier for each product.
    product_type VARCHAR(255),                -- Type of the product (e.g., Roof Kit, Panel, Battery, Inverter).
    manufacturer VARCHAR(255),                -- Name of the product's manufacturer.
    product_model VARCHAR(255),               -- Model of the product.
    product_name VARCHAR(255),                -- Name of the product.
    kwp FLOAT,                               no -- Kilowatt-peak of the product.
    voc FLOAT,                                -- Open circuit voltage (VOC) of the product.
    isc FLOAT,                                -- Short circuit current (ISC) of the product.
    type VARCHAR(255)                         -- Product type - eg inroof/above roof
    capacity FLOAT,                           -- Capacity of the product (relevant for batteries and inverters).
    no_phases INT,                            -- Number of phases (relevant for electrical products).
    model_ref VARCHAR(255),                   -- Reference to the product model.
    cost_today FLOAT,                         -- Current cost of the product.
    mcs_product_reference VARCHAR(255),               -- Reference number for the MCS certification.
    mcs_product_id VARCHAR(255),                    -- Code associated with the MCS certification.
    import_id CHAR(36),
    PRIMARY KEY (product_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);



-- This table stores submissions related to the Microgeneration Certification Scheme (MCS) for products.
-- It includes details of the submission status, certificate information, and related dates.
-- Additionally, it tracks which users submitted and checked the submission.
CREATE TABLE IF NOT EXISTS sn_mcs_submission (
    mcs_submission_id CHAR(36) NOT NULL,             -- Primary Key: Unique identifier for each MCS submission record.
    mcs_submit_status CHAR(36) NOT NULL,             -- Submission Status: Identifier linking to the status in the sn_status table.
    mcs_certificate_number VARCHAR(255),             -- Number on the MCS certificate.
    mcs_certificate_id VARCHAR(255),                 -- ID of the MCS certificate.
    mcs_certificate_date DATE,                       -- Date of the certificate being issued.
    mcs_loaded_date DATE,                            -- Date of the data being moved to the mcs submission portal
    mcs_submitted_date DATE,                         -- Date of submission of the MCS certificate.
    mcs_checked_date DATE,                           -- Date when the submission was checked.
    mcs_api_return_message TEXT,                     -- Response message from the MCS API.
    submission_checked_by CHAR(36),                  -- User ID (from sn_users) of the person who checked the submission.
    submitted_by CHAR(36),                           -- User ID (from sn_users) of the person who submitted the MCS certificate.
    import_id CHAR(36),                              -- Identifier for the import event, linking to sn_import_events.
    PRIMARY KEY (mcs_submission_id),
    FOREIGN KEY (submission_checked_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (submitted_by) REFERENCES sn_users(user_id),
    FOREIGN KEY (mcs_submit_status) REFERENCES sn_status(status_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);

-- This table stores submissions related to the Microgeneration Certification Scheme (MCS) api's county reference
CREATE TABLE IF NOT EXISTS sn_mcs_ref_counties (
    mcs_county_id CHAR(36) NOT NULL,             -- Primary Key: Unique identifier for each MCS submission record.
    mcs_county_name VARCHAR(255) UNIQUE NOT NULL,             -- the name of the county
    mcs_api_county_id INT NOT NULL,  -- this is what the numberic id that the api needs
    import_id CHAR(36),                              -- Identifier for the import event, linking to sn_import_events.
    PRIMARY KEY (mcs_county_id),
    FOREIGN KEY (import_id) REFERENCES sn_import_events(import_id)
);